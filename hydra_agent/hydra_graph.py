from redisgraph import Graph, Node
import json
from hydra_python_core import doc_writer
from core.utils.classes_objects import ClassEndpoints
from collections_endpoint import CollectionEndpoints
from core.utils.redis_proxy import RedisProxy


class InitialGraph:
    """Creates a redis graph for the provided api doc

    Attributes:
        url: URL for the API Documentation.
    """

    def __init__(self, url, api_doc):
        self.url = url
        self.api_doc = api_doc
        self.class_endpoints = {}
        self.collection_endpoints = {}

    def get_apistructure(self, entrypoint_node, api_doc):
        """ It breaks the endpoint into two parts ``collectionEndpoints`` and
        ``classEndpoints``"""

        print('Spliting Entrypoint into 2 types of Endpoints -- ',
              'collectionEndpoints and classEndpoints')
        for support_property in api_doc.entrypoint.entrypoint.supportedProperty:
            if isinstance(
                    support_property,
                    doc_writer.EntryPointClass):
                self.class_endpoints[support_property.name] = support_property.id_

            if isinstance(
                    support_property,
                    doc_writer.EntryPointCollection):
                self.collection_endpoints[support_property.name] = support_property.id_

        if len(self.class_endpoints.keys()) > 0:
            clas = ClassEndpoints(self.redis_graph, self.class_endpoints)
            clas.endpointclasses(entrypoint_node, api_doc, self.url)

        if len(self.collection_endpoints.keys()) > 0:
            coll = CollectionEndpoints(self.redis_graph, self.class_endpoints)
            coll.endpointCollection(
                self.collection_endpoints,
                entrypoint_node,
                api_doc,
                self.url)

    def get_endpoints(self, api_doc, redis_connection):
        """Creates entrypoint node
        """

        print("Creating Entrypoint Node...")
        entrypoint_properties = {}
        entrypoint_properties["@id"] = str("vocab:Entrypoint")
        entrypoint_properties["url"] = str(
            api_doc.entrypoint.url) + str(api_doc.entrypoint.api)
        entrypoint_properties["supportedOperation"] = "GET"
        entrypoint_node = Node(
            label="id",
            alias="Entrypoint",
            properties=entrypoint_properties)
        self.redis_graph.add_node(entrypoint_node)
        redis_connection.set("EntryPoint", json.dumps(entrypoint_properties))
        return self.get_apistructure(entrypoint_node, api_doc)

    def main(self, check_commit):
        connection = RedisProxy.get_connection()
        self.redis_graph = Graph("apidoc", connection)

        print("Initializing Graph...")

        self.get_endpoints(self.api_doc, connection)

        if check_commit:
            print("Commiting...")
            try:
                self.redis_graph.commit()
            except Exception as err:
                raise(err)
            print("Done!")
        return self.redis_graph

        # uncomment below 2 lines for getting nodes for whole graph
    #    for node in redis_graph.nodes.values():
    #        print("\n",node.alias)
        # uncomment the below lines for show the graph stored in redis
    #    g = Digraph('redis_graph', filename='hydra_graph.gv')
    #    # using graphviz for visualization of graph stored in redis
    #    for edge in redis_graph.edges:
    #        g.edge(edge.src_node.alias, edge.dest_node.alias)
    #    g.view()
    #    #see the graph generated by graphviz
