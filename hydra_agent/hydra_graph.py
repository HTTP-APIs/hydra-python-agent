from redisgraph import Graph, Node
from redis.client import Redis
from hydra_python_core import doc_writer
from hydra_python_core.doc_writer import HydraDoc
from core.utils.classes_objects import ClassEndpoints
from core.utils.collections_endpoint import CollectionEndpoints
from core.utils.redis_proxy import RedisProxy


class InitialGraph:
    """
    Creates a redis graph for the provided api doc

    Attributes:
        url: URL for the API Documentation.
        api_doc: HydraDoc object corresponding to
                 API Documentation
        class_endpoints: A dictionary of classEndpoints
        collection_endpoints: A dictionary of collectionEndpoints
        entrypoint_node: EntryPoint of the API Documentation
        redis_graph: Redis Graph for the API Documentation
    """

    def __init__(self, url: str, api_doc: HydraDoc):
        self.url = url
        self.api_doc = api_doc
        self.class_endpoints = {}
        self.collection_endpoints = {}

    def get_entrypoint_properties(self, api_doc: HydraDoc):
        """
        It breaks the endpoint into two parts ``collectionEndpoints`` and
        ``classEndpoints`` and creates nodes for each endpoint

        Args:
            entrypoint_node : Node for the Entrypoint of
                              API Documentation
            api_doc: HydraDoc corresponding to API Documentation
        """

        for entrypoint_prop in api_doc.entrypoint.entrypoint.supportedProperty:
            if isinstance(
                    entrypoint_prop,
                    doc_writer.EntryPointClass):
                self.class_endpoints[entrypoint_prop.name] = entrypoint_prop.id_
            elif isinstance(
                    entrypoint_prop,
                    doc_writer.EntryPointCollection):
                self.collection_endpoints[entrypoint_prop.name] = entrypoint_prop.id_

        if self.class_endpoints:
            class_nodes = ClassEndpoints(
                self.redis_graph, self.class_endpoints, self.api_doc)
            class_nodes.create_endpoint_nodes(
                self.entrypoint_node, self.url)

        if self.collection_endpoints:
            coll = CollectionEndpoints(
                self.redis_graph, self.class_endpoints, self.api_doc)
            coll.create_collection_endpoints(
                self.collection_endpoints,
                self.entrypoint_node,
                self.url)

    def create_entrypoint(self, api_doc: HydraDoc, redis_connection: Redis) -> Node:
        """
            Creates an entrypoint node

            Args:
                api_doc: HydraDoc object corresponding to the API Documentation
                redis_connection: An instance of redis-client
        """
        entrypoint_properties = {}
        entrypoint_properties["@id"] = str("vocab:Entrypoint")
        entrypoint_properties["url"] = str(
            api_doc.entrypoint.url) + str(api_doc.entrypoint.api)
        entrypoint_properties["supportedOperation"] = "GET"
        entrypoint_node = Node(
            label="id",
            alias="Entrypoint",
            properties=entrypoint_properties)
        try:
            self.redis_graph.add_node(entrypoint_node)
        except Exception as err:
            raise err
        return entrypoint_node

    def main(self, check_commit: bool):
        """
        Driver function for creating redis graph

        Args:
            check_commit: Boolean to check if URL is already registered int redis or not
        """

        connection = RedisProxy.get_connection()
        self.redis_graph = Graph("apidoc", connection)

        self.entrypoint_node = self.create_entrypoint(self.api_doc, connection)
        self.get_entrypoint_properties(self.api_doc)

        if check_commit:
            try:
                self.redis_graph.commit()
            except Exception as err:
                raise(err)
            print("Done!")

        # uncomment below 2 lines for getting nodes for whole graph
    #    for node in redis_graph.nodes.values():
    #        print("\n",node.alias)
        # uncomment the below lines for show the graph stored in redis
    #    g = Digraph('redis_graph', filename='hydra_graph.gv')
    #    # using graphviz for visualization of graph stored in redis
    #    for edge in redis_graph.edges:
    #        g.edge(edge.src_node.alias, edge.dest_node.alias)
    #    g.view()
    #    #see the graph generated by graphviz
